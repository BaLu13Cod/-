#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Cloud Security System
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
"""

import asyncio
import requests
import json
import time
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.security_monitor import SecurityMonitor, SecurityEvent, ThreatLevel
from core.integration_manager import IntegrationConfig, IntegrationType

class SecuritySystemDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.api_base_url = "http://localhost:8000"
        self.monitor = SecurityMonitor()
        self.demo_incidents = []
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cloud Security System...")
        
        try:
            await self.monitor.initialize()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def check_api_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
        try:
            response = requests.get(f"{self.api_base_url}/health")
            if response.status_code == 200:
                print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
    
    async def demo_threat_database(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑"""
        print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≥—Ä–æ–∑
        try:
            response = requests.get(f"{self.api_base_url}/threats")
            if response.status_code == 200:
                threats = response.json()
                print(f"üìà –í—Å–µ–≥–æ —É–≥—Ä–æ–∑ –≤ –±–∞–∑–µ: {len(threats)}")
                
                # –ü–æ–∫–∞–∑ —É–≥—Ä–æ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for threat in threats:
                    category = threat['category']
                    if category not in categories:
                        categories[category] = []
                    categories[category].append(threat['name'])
                
                for category, threat_names in categories.items():
                    print(f"\nüîç {category}:")
                    for name in threat_names[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"   ‚Ä¢ {name}")
                    if len(threat_names) > 3:
                        print(f"   ... –∏ –µ—â–µ {len(threat_names) - 3}")
                
                # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–≥—Ä–æ–∑—ã
                print(f"\nüîç –ü–æ–∏—Å–∫ —É–≥—Ä–æ–∑—ã 'WannaCry':")
                search_response = requests.get(f"{self.api_base_url}/threats?search=WannaCry")
                if search_response.status_code == 200:
                    search_results = search_response.json()
                    for threat in search_results:
                        print(f"   ‚Ä¢ {threat['name']} - {threat['severity']}")
                        print(f"     {threat['description']}")
                
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≥—Ä–æ–∑—ã: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑—ã —É–≥—Ä–æ–∑: {e}")
    
    async def demo_security_events(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüö® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        demo_events = [
            {
                "source": "network_monitor",
                "event_type": "suspicious_connection",
                "severity": "HIGH",
                "description": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–º—É IP",
                "data": {
                    "source_ip": "192.168.1.100",
                    "target_ip": "91.121.28.34",  # IP –∏–∑ –±–∞–∑—ã —É–≥—Ä–æ–∑ WannaCry
                    "source_host": "workstation-01",
                    "target_host": "unknown",
                    "connection_type": "outbound_tcp",
                    "port": 443
                }
            },
            {
                "source": "file_monitor",
                "event_type": "suspicious_file_creation",
                "severity": "CRITICAL",
                "description": "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .wncry",
                "data": {
                    "file_path": "/tmp/important_document.wncry",
                    "file_hash": "24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c",
                    "source_host": "workstation-02",
                    "process_name": "explorer.exe",
                    "user": "admin"
                }
            },
            {
                "source": "dns_monitor",
                "event_type": "suspicious_dns_query",
                "severity": "HIGH",
                "description": "DNS –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –¥–æ–º–µ–Ω—É",
                "data": {
                    "domain": "iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com",
                    "source_ip": "192.168.1.75",
                    "source_host": "workstation-03",
                    "query_type": "A",
                    "timestamp": datetime.now().isoformat()
                }
            },
            {
                "source": "system_monitor",
                "event_type": "high_cpu_usage",
                "severity": "MEDIUM",
                "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å CPU",
                "data": {
                    "source_host": "workstation-04",
                    "cpu_usage": 95.5,
                    "process_name": "xmrig.exe",
                    "file_hash": "d4e5f6a7b8c9",
                    "network_connections": ["pool.minexmr.com:3333"],
                    "memory_usage": "2.1 GB"
                }
            }
        ]
        
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        for i, event_data in enumerate(demo_events, 1):
            try:
                print(f"\nüìã –°–æ–±—ã—Ç–∏–µ {i}: {event_data['event_type']}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {event_data['source']}")
                print(f"   –£—Ä–æ–≤–µ–Ω—å: {event_data['severity']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {event_data['description']}")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API
                response = requests.post(f"{self.api_base_url}/events", json=event_data)
                if response.status_code == 200:
                    result = response.json()
                    print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {result.get('incident_id', 'N/A')}")
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {response.status_code}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(demo_events)}")
    
    async def demo_integrations(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        print("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        demo_integrations = [
            {
                "name": "AWS_Production_Demo",
                "type": "cloud",
                "endpoint_url": "https://ec2.amazonaws.com",
                "credentials": {
                    "region": "us-east-1",
                    "access_key": "demo_access_key",
                    "secret_key": "demo_secret_key"
                }
            },
            {
                "name": "Azure_Production_Demo",
                "type": "cloud",
                "endpoint_url": "https://management.azure.com",
                "credentials": {
                    "subscription_id": "demo_subscription_id",
                    "tenant_id": "demo_tenant_id"
                }
            },
            {
                "name": "Local_Network_Device_Demo",
                "type": "device",
                "endpoint_url": "http://192.168.1.100:8080",
                "polling_interval": 30
            }
        ]
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        
        for integration_data in demo_integrations:
            try:
                print(f"\nüîó –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_data['name']}")
                print(f"   –¢–∏–ø: {integration_data['type']}")
                print(f"   Endpoint: {integration_data.get('endpoint_url', 'N/A')}")
                
                response = requests.post(f"{self.api_base_url}/integrations", json=integration_data)
                if response.status_code == 200:
                    result = response.json()
                    print(f"   ‚úÖ {result['message']}")
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.status_code}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        try:
            response = requests.get(f"{self.api_base_url}/integrations")
            if response.status_code == 200:
                integrations = response.json()
                print(f"   üìä –í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {len(integrations)}")
                
                for integration in integrations:
                    status_icon = "üü¢" if integration['status'] == 'active' else "üî¥"
                    print(f"   {status_icon} {integration['name']} ({integration['type']}) - {integration['status']}")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def demo_incident_management(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏"""
        print("\nüö® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        try:
            print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
            response = requests.get(f"{self.api_base_url}/incidents")
            if response.status_code == 200:
                incidents = response.json()
                print(f"   üìä –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {len(incidents)}")
                
                if incidents:
                    # –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                    first_incident = incidents[0]
                    print(f"\nüîç –î–µ—Ç–∞–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {first_incident['incident_id']}")
                    print(f"   –£–≥—Ä–æ–∑–∞: {first_incident.get('threat_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    print(f"   –£—Ä–æ–≤–µ–Ω—å: {first_incident['severity']}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {first_incident['status']}")
                    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {first_incident['description']}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
                    print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞...")
                    update_data = {"status": "investigating"}
                    update_response = requests.put(
                        f"{self.api_base_url}/incidents/{first_incident['incident_id']}/status",
                        params={"status": "investigating"}
                    )
                    
                    if update_response.status_code == 200:
                        result = update_response.json()
                        print(f"   ‚úÖ {result['message']}")
                    else:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
                    
                    # –ü–æ–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—é
                    if first_incident.get('response_actions'):
                        print(f"\nüõ°Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—é:")
                        for action in first_incident['response_actions']:
                            print(f"   ‚Ä¢ {action}")
                    else:
                        print(f"\nüìù –î–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    # –ü–æ–∫–∞–∑ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    if first_incident.get('ml_predictions'):
                        print(f"\nü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
                        for model, prediction in first_incident['ml_predictions'].items():
                            if 'error' not in prediction:
                                print(f"   ‚Ä¢ {model}: {prediction}")
                    
                else:
                    print("   üìù –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def demo_learning_system(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            response = requests.get(f"{self.api_base_url}/learning/performance")
            if response.status_code == 200:
                metrics = response.json()
                if metrics:
                    print(f"   üìà –ü–æ–∫–æ–ª–µ–Ω–∏–µ: {metrics.get('generation', 'N/A')}")
                    print(f"   üïí –í—Ä–µ–º—è: {metrics.get('timestamp', 'N/A')}")
                    
                    overall = metrics.get('overall_performance', {})
                    print(f"   üéØ –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall.get('best_accuracy', 'N/A'):.4f}")
                    print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall.get('average_accuracy', 'N/A'):.4f}")
                    print(f"   üî¢ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {overall.get('total_models', 'N/A')}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    detailed = metrics.get('detailed_performance', {})
                    if detailed:
                        print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
                        for model_name, model_metrics in detailed.items():
                            print(f"   ‚Ä¢ {model_name}:")
                            print(f"     - –¢–æ—á–Ω–æ—Å—Ç—å: {model_metrics.get('accuracy', 'N/A'):.4f}")
                            print(f"     - F1-–º–µ—Ä–∞: {model_metrics.get('f1_score', 'N/A'):.4f}")
                else:
                    print("   üìù –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏: {response.status_code}")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            print(f"\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–≥—Ä–æ–∑ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            new_threats = [
                {
                    "name": "Demo_Threat_1",
                    "category": "DEMO",
                    "severity": "MEDIUM",
                    "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "ioc_patterns": {
                        "ip_addresses": ["192.168.1.200"],
                        "domains": ["demo-malware.com"]
                    }
                },
                {
                    "name": "Demo_Threat_2",
                    "category": "DEMO",
                    "severity": "HIGH",
                    "description": "–ï—â–µ –æ–¥–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞",
                    "ioc_patterns": {
                        "file_hashes": ["demo_hash_12345"],
                        "domains": ["demo-attack.net"]
                    }
                }
            ]
            
            print(f"   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(new_threats)} –Ω–æ–≤—ã—Ö —É–≥—Ä–æ–∑...")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≥—Ä–æ–∑ –≤ –±–∞–∑—É
            for threat in new_threats:
                threat_response = requests.post(f"{self.api_base_url}/threats", json=threat)
                if threat_response.status_code == 200:
                    print(f"   ‚úÖ –£–≥—Ä–æ–∑–∞ '{threat['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≥—Ä–æ–∑—ã: {threat_response.status_code}")
            
            # –≠–≤–æ–ª—é—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
            print(f"   üß† –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...")
            evolve_response = requests.post(f"{self.api_base_url}/learning/evolve", json=new_threats)
            
            if evolve_response.status_code == 200:
                result = evolve_response.json()
                print(f"   ‚úÖ {result['message']}")
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {evolve_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def demo_monitoring(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüì° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            response = requests.get(f"{self.api_base_url}/monitor/status")
            if response.status_code == 200:
                status = response.json()
                print(f"   üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {status.get('is_running', False)}")
                print(f"   üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {status.get('total_events', 0)}")
                print(f"   üö® –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {status.get('total_incidents', 0)}")
                print(f"   üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {status.get('active_integrations', 0)}")
                
                # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if not status.get('is_running', False):
                    print(f"\n‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                    start_response = requests.post(f"{self.api_base_url}/monitor/start")
                    if start_response.status_code == 200:
                        result = start_response.json()
                        print(f"   ‚úÖ {result['message']}")
                    else:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {start_response.status_code}")
                else:
                    print(f"\n‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                
                # –ü–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã...")
                await asyncio.sleep(5)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                print(f"üìä –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
                response = requests.get(f"{self.api_base_url}/monitor/status")
                if response.status_code == 200:
                    status = response.json()
                    print(f"   üìà –°–æ–±—ã—Ç–∏–π: {status.get('total_events', 0)}")
                    print(f"   üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {status.get('total_incidents', 0)}")
                
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üéØ Cloud Security System - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        if not self.check_api_status():
            print("\n‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:")
            print("   python -m api.main")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            return
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await self.demo_threat_database()
        await self.demo_security_events()
        await self.demo_integrations()
        await self.demo_incident_management()
        await self.demo_learning_system()
        await self.demo_monitoring()
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
        print("   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md")
        print("   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("   ‚Ä¢ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã: python main.py")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = SecuritySystemDemo()
    await demo.run_demo()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
